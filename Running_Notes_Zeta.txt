Day1:22-Jan-2024
======
https://github.com/kolaparthi34k/ZetaGloballHydTraining
https://github.com/kolaparthisrini
https://skolaparthi.com

Java Versions:
1.8
legacy--->1.6
Jenkins---->1.17,1.20,1.21,1.11
Kubernats---->=1.8
Spring STS===>1.11/1.17/1.20
Spring STS 4.0/VS code--sts
>>>>>>>>>>>>>>>>>>>>>

Eclipse----->Git----------->Build---->Testing------->view the output

ext folder in JVM architectre

Bytecode: combination of 0,1 and special symbols generated by VM.

Bytecode --- source code convert?----sol) Java decompiler tool
========================================================
Day2
-------
1.8
>>packaging files
manually jar/war/ear--->jar <path of the projectname> targetfile.jar
maven---can do packaging
lua---js
>>Java--->J2SE--web and desktop
         J2EE---Webapp and enterprise app
         J2ME---Mobile edition----for mob 
----------->
Datatype,Expressions,Operators and Conditional statements

Config Management tools------>Puppet/Chef/Ansible
Architecture ---Data flow--db model---UML
JIRA/Service now---Sprint--SLA
SLA----Task

complixity of task---severity is v high
Scaffolding: Process of creating project structure is called as Scafffolding.

Eclipse---osgi bundle mechanism to create projects
>>LOgs will help you.----ELK stack
E---elastic
L--log stash
K--kibana

>>>GReenfield and brownfield projects

>>>>>JAVA
Fund transfer---NEFT,UPI,SWIFT
Orchestration

NEFT App
UPI app
Swift 


Target audience

Interfaces
Abstract classes
Concrete classes
================>
datatypes:type of data
data----1,q,`,f
processing
Information------------>
>>>>>>>>>>>>>
3.14563---64bit,32bit
strictfp
DDOS--_C
JAVA-
Structured Programming int
Serialization: process of saving SBI of an object to storage like file/database/webservices temporarl.

Deserialization: recovering from serialization.
OOPS---Integer

>>Collections
>>>SBI

Variable arguments
>>if we need to create multiple constants,dont use Classes.Use Enum classes.


interface A
{
}----marker interfaces

interface B
{
public void dd();
}---normal interface

JDK1.8------Functional Interfaces------Lambda expressions---Streams---Data engineering>>>
====================
1)Zeta Sodexo Zeta Sodexo Zeta Sodexo Zeta Sodexo
2)
i/p: lenovo
o/p:LeNoVo-----without string api

3)Zeta Sodexo Zeta Sodexo Zeta Sodexo Zeta Sodexo
No of 'a':
No of 'S':
No of Characters: ---use string api

4)a = "Zeta" b="Infy"
O/p: ZaIn ---- without string api
--------------------------------------------------
https://logging.apache.org/log4j/2.x/
>>properties and xml file

file-----database
txt,excel----
cclient want to share some data.   xml parser--xml parsers are slow.
txt----xml---json---bson

In java to write a configuration file,we can use any of the below
1)properties
2)xml
3)JSON
4)YAML

=====
Define console appender
log4j.appender.console=org.apache.log4j.ConsoleAppender
logrj.appender.console.Target=System.out
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%-5p %c{1} - %m%n

#Define rolling file appender
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=logs/main.log
log4j.appender.file.Append=true
log4j.appender.file.ImmediateFlush=true
log4j.appender.file.MaxFileSize=10MB
log4j.appender.file.MaxBackupIndex=5
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d %d{Z} [%t] %-5p (%F:%L) - %m%n





















































